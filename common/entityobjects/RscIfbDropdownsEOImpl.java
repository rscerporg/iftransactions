package oracle.apps.po.rscapps.oss.iftransactions.common.entityobjects;
import oracle.apps.fnd.framework.server.OAEntityImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.AttributeList;
import oracle.jbo.server.TransactionEvent;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.RowID;
//  ---------------------------------------------------------------
//  ---    File generated by Oracle Business Components for Java.
//  ---------------------------------------------------------------

public class RscIfbDropdownsEOImpl extends OAEntityImpl 
{
  protected static final int ITEMID = 0;
  protected static final int ITEMVALUE = 1;
  protected static final int TABLEID = 2;
  protected static final int ROWID = 3;
  private static oracle.apps.fnd.framework.server.OAEntityDefImpl mDefinitionObject;

  /**
   * 
   * This is the default constructor (do not remove)
   */
  public RscIfbDropdownsEOImpl()
  {
  }

  /**
   * 
   * Retrieves the definition object for this instance class.
   */
  public static synchronized EntityDefImpl getDefinitionObject()
  {
    if (mDefinitionObject == null)
    {
      mDefinitionObject = (oracle.apps.fnd.framework.server.OAEntityDefImpl)EntityDefImpl.findDefObject("oracle.apps.po.rscapps.oss.iftransactions.common.entityobjects.RscIfbDropdownsEO");
    }
    return mDefinitionObject;
  }

  /**
   * 
   * Add attribute defaulting logic in this method.
   */
  public void create(AttributeList attributeList)
  {
    super.create(attributeList);
  }

  /**
   * 
   * Add entity remove logic in this method.
   */
  public void remove()
  {
    super.remove();
  }

  /**
   * 
   * Add Entity validation code in this method.
   */
  protected void validateEntity()
  {
    super.validateEntity();
  }

  /**
   * 
   * Add locking logic here.
   */
  public void lock()
  {
    super.lock();
  }

  /**
   * 
   * Custom DML update/insert/delete logic here.
   */
  protected void doDML(int operation, TransactionEvent e)
  {
    super.doDML(operation, e);
  }

  /**
   * 
   * Gets the attribute value for ItemId, using the alias name ItemId
   */
  public Number getItemId()
  {
    return (Number)getAttributeInternal(ITEMID);
  }

  /**
   * 
   * Sets <code>value</code> as the attribute value for ItemId
   */
  public void setItemId(Number value)
  {
    setAttributeInternal(ITEMID, value);
  }

  /**
   * 
   * Gets the attribute value for ItemValue, using the alias name ItemValue
   */
  public String getItemValue()
  {
    return (String)getAttributeInternal(ITEMVALUE);
  }

  /**
   * 
   * Sets <code>value</code> as the attribute value for ItemValue
   */
  public void setItemValue(String value)
  {
    setAttributeInternal(ITEMVALUE, value);
  }

  /**
   * 
   * Gets the attribute value for TableId, using the alias name TableId
   */
  public Number getTableId()
  {
    return (Number)getAttributeInternal(TABLEID);
  }

  /**
   * 
   * Sets <code>value</code> as the attribute value for TableId
   */
  public void setTableId(Number value)
  {
    setAttributeInternal(TABLEID, value);
  }

  /**
   * 
   * Gets the attribute value for RowID, using the alias name RowID
   */
  public RowID getRowID()
  {
    return (RowID)getAttributeInternal(ROWID);
  }
  //  Generated method. Do not modify.

  protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception
  {
    switch (index)
      {
      case ITEMID:
        return getItemId();
      case ITEMVALUE:
        return getItemValue();
      case TABLEID:
        return getTableId();
      case ROWID:
        return getRowID();
      default:
        return super.getAttrInvokeAccessor(index, attrDef);
      }
  }
  //  Generated method. Do not modify.

  protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception
  {
    switch (index)
      {
      case ITEMID:
        setItemId((Number)value);
        return;
      case ITEMVALUE:
        setItemValue((String)value);
        return;
      case TABLEID:
        setTableId((Number)value);
        return;
      default:
        super.setAttrInvokeAccessor(index, value, attrDef);
        return;
      }
  }
}